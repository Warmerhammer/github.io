[{"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\index.js":"1","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\App.js":"2","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\home.js":"3","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\Header.js":"4","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\headerItems.js":"5","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\GreyButtonHover.js":"6","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\AboutMe\\AboutMe.js":"7","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\HomePage\\HomePage.js":"8","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Home.js":"9","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\ScrollableElement\\ScrollableElement.js":"10","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\IntersectionObserver\\index.js":"11","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\DynamicModule\\index.js":"12","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\DynamicModule\\delay.js":"13","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\index.js":"14","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Placeholder.js":"15","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Card\\Card.js":"16","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Card\\VoteCount.js":"17","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\BlockJumpingGame\\app.js":"18","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\VerticalMenu.js":"19","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\project1.js":"20","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\project2.js":"21"},{"size":330,"mtime":1614727646954,"results":"22","hashOfConfig":"23"},{"size":5575,"mtime":1615160946602,"results":"24","hashOfConfig":"23"},{"size":2128,"mtime":1611799499814,"results":"25","hashOfConfig":"23"},{"size":2099,"mtime":1611775711667,"results":"26","hashOfConfig":"23"},{"size":592,"mtime":1611355663598,"results":"27","hashOfConfig":"23"},{"size":661,"mtime":1611380357950,"results":"28","hashOfConfig":"23"},{"size":2309,"mtime":1613684477843,"results":"29","hashOfConfig":"23"},{"size":1155,"mtime":1611796449416,"results":"30","hashOfConfig":"23"},{"size":1902,"mtime":1615243314900,"results":"31","hashOfConfig":"23"},{"size":925,"mtime":1612369251194,"results":"32","hashOfConfig":"23"},{"size":1515,"mtime":1612382208486,"results":"33","hashOfConfig":"23"},{"size":6875,"mtime":1615156495853,"results":"34","hashOfConfig":"23"},{"size":237,"mtime":1612484395650,"results":"35","hashOfConfig":"23"},{"size":4761,"mtime":1615243338572,"results":"36","hashOfConfig":"23"},{"size":781,"mtime":1615161130545,"results":"37","hashOfConfig":"23"},{"size":4764,"mtime":1614975890136,"results":"38","hashOfConfig":"23"},{"size":2064,"mtime":1614203436661,"results":"39","hashOfConfig":"23"},{"size":4679,"mtime":1614367040160,"results":"40","hashOfConfig":"23"},{"size":3062,"mtime":1614808502915,"results":"41","hashOfConfig":"23"},{"size":3211,"mtime":1615242902803,"results":"42","hashOfConfig":"23"},{"size":2827,"mtime":1615244185231,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1uftvxx",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\index.js",[],["98","99"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\App.js",["100","101"],"import React, { createRef } from 'react';\nimport _ from 'lodash';\nimport {\n  BrowserRouter as Switch,\n  Route,\n  Router,\n  NavLink,\n} from 'react-router-dom';\nimport * as Scroll from 'react-scroll';\nimport { Container, Menu, Button, Ref } from 'semantic-ui-react';\nimport { createBrowserHistory } from 'history';\nimport DynamicModule from './components/DynamicModule';\n\n\nimport Home from './components/Home';\nimport AboutMe from './components/AboutMe/AboutMe';\nimport Projects from './components/Projects';\nimport VerticalMenu from './Navigation/VerticalMenu';\n\nimport './App.css';\n\nconst history = createBrowserHistory();\n\nconst routes = [\n  {\n    path: '/',\n    key: '01',\n    name: 'Home',\n    Component: <Home />,\n    Import: () => import('./components/Home'),\n  },\n  {\n    path: '/AboutMe',\n    key: '02',\n    name: 'AboutMe',\n    Component: <AboutMe />,\n    Import: () => import('./components/AboutMe/AboutMe'),\n  },\n  {\n    path: '/Projects',\n    key: '03',\n    name: 'Projects',\n    Component: <Projects />,\n    Import: () => import('./components/Projects'),\n  },\n];\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeItemPath: '/',\n      buttonColor: 'blue',\n      buttonBasic: true,\n      postList: [routes[0]],\n      posti: 0,\n    };\n\n    this.myDivToFocus = React.createRef();\n  }\n\n  dynamicModuleRef = createRef();\n\n  handleTransition = () => {\n    // console.log(this.state.postList);\n\n    var postIndex = this.state.posti;\n    var postLi = this.state.postList;\n\n    //finds the index of the most recent postList.route\n    var index = _.findIndex(routes, function (o) {\n      return o === postLi[postIndex];\n    });\n    var newIndex = index + 1;\n\n    if (this.state.postList.length <= routes.length && routes[newIndex]) {\n      const newList = this.state.postList.concat([routes[newIndex]]);\n      this.setState({\n        posti: newIndex,\n        postList: newList,\n      });\n    }\n  };\n\n\n  handleMouseDown = () => {\n    this.setState({ buttonColor: 'red' });\n    this.setState({ buttonBasic: false });\n  };\n\n  handleMouseUp = () => {\n    this.setState({ buttonColor: 'red' });\n    this.setState({ buttonBasic: true });\n  };\n\n  menuClick = route => {\n    var index = _.findIndex(routes, function (o) {\n      return o.key === route.key;\n    });\n\n    let newList = this.state.postList;\n\n    if (!newList[index]) {\n      //start at postList index 1 and concat up to new index\n      for (let i = 1; i <= index; i++) {\n        if (!newList[i]) {\n          newList.push(routes[i]);\n        }\n      }\n\n      this.setState({\n        postList: newList,\n        posti: index,\n      });\n\n      setTimeout(() => {\n        Scroll.scroller.scrollTo(route.name, {\n          duration: 3000,\n          delay: 500,\n          smooth: 'easeInOutQuart',\n        });\n      }, 200)\n      }\n      \n  };\n\n  render() {\n    return (\n      <Router history={history}>\n        <br />\n        <Container fluid className=\"header\">\n          <Button\n            className=\"AppButton\"\n            onMouseEnter={() => this.setState({ buttonColor: 'grey' })}\n            onMouseLeave={() => this.setState({ buttonColor: 'blue' })}\n            onMouseDown={() => this.handleMouseDown()}\n            onMouseUp={() => this.handleMouseUp()}\n            basic={this.state.buttonBasic}\n            floated=\"right\"\n            color={this.state.buttonColor}\n          >\n            {'Resum\\xE9'}\n          </Button>\n          <Menu text color=\"red\" borderless floated=\"right\">\n            {routes.map((route, index) => (\n              <Scroll.Link\n                key={index}\n                to={route.name}\n                activeClass=\"active\"\n                smooth\n                onSetActive={() => console.log('setactive')}\n                spy={true}\n                onClick={() => this.menuClick(route)}\n                duration={1000}\n              >\n                <Menu.Item key={index} link={true} to={route.name}>\n                  {route.key}\n                  {route.name}\n                </Menu.Item>\n              </Scroll.Link>\n            ))}\n          </Menu>\n        </Container>\n        <div style={{ padding: '2vh 0 10vh 0' }}>\n          {this.state.postList.map((post, index) => {\n            return (\n              <Ref key={index} innerRef={this.dynamicModuleRef}>\n                <Scroll.Element name={post.name}>\n                  <DynamicModule\n                    key={index}\n                    placeholder={post.Component}\n                    component={post.Import}\n                    transition={() => this.handleTransition()}\n                    style={{ width: '100%' }}\n                  />\n                </Scroll.Element>\n              </Ref>\n            );\n          })}\n          <VerticalMenu\n            routes={routes}\n            vNavLink={NavLink}\n            vActiveItem={this.state.activeItem}\n          />\n          {/* <div style={{ height: '30vh' }}>\n          <Placeholder style={{ margin: '15vh 10vw', height: '30vh' }} fluid>\n            <Placeholder.Header image>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        </div> */}\n        </div>\n      </Router>\n    );\n  }\n}\n","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\home.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\Header.js",["102"],"import React, { Component } from 'react';\r\nimport { Menu, Button, Container } from 'semantic-ui-react';\r\nimport GreyButtonHover from '../Styles/GreyButtonHover';\r\nimport classes from './Header.css';\r\n\r\nexport default class Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: 'Home',\r\n      buttonHover: false,\r\n      buttonColor: 'grey',\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <Button\r\n          onMouseEnter={() => this.setState({ buttonColor: 'black'})}\r\n          onMouseLeave={() => this.setState({ buttonColor: 'grey'})}\r\n          onMouseDown={() => this.setState({buttonColor: 'red'})}\r\n          floated=\"right\"\r\n          basic\r\n          color={this.state.buttonColor}\r\n        >\r\n          Resume\r\n        </Button>\r\n        <Menu text borderless floated=\"right\">\r\n          <Menu.Item\r\n            name=\"Home\"\r\n            pathname=\"/\"\r\n            active={activeItem === 'Home'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            <p>01.Home</p>\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            name=\"About\"\r\n            pathname=\"/About\"\r\n            className={classes.menu}\r\n            active={activeItem === 'About'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            <p>02.About</p>\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            name=\"Projects\"\r\n            pathname=\"/Projects\"\r\n            className={classes.menu}\r\n            active={activeItem === 'Projects'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            <p>03.Projects</p>\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            name=\"Contact\"\r\n            pathname=\"/Contact\"\r\n            className={classes.menu}\r\n            active={activeItem === 'Contact'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            <p>04.Contact</p>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n",["103","104"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\headerItems.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\GreyButtonHover.js",["105"],"import React, { useState, Component } from 'react';\r\nimport { Container, Button } from 'semantic-ui-react';\r\n\r\nconst GreyButtonHover = () => {\r\n  const [hover, setHover] = useState(false);\r\n\r\n  let color;\r\n\r\n  const toggleHover = () => {\r\n    setHover(true);\r\n\r\n    if (hover === true) {\r\n      color = {\r\n        backgroundColor: 'grey',\r\n      };\r\n    } else {\r\n      color = {\r\n        backgroundColor: 'white',\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Button\r\n        style={color}\r\n        onMouseEnter={toggleHover}\r\n        onMouseLeave={!toggleHover}\r\n      ></Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GreyButtonHover;\r\n","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\AboutMe\\AboutMe.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\HomePage\\HomePage.js",["106","107"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './HomePage.css';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nimport Home from '../Home';\r\nimport AboutMe from '../AboutMe/AboutMe';\r\n\r\nconst pages = [<Home />, <AboutMe />];\r\n\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    items: Array.from({ length: 1 }),\r\n  };\r\n\r\n  fetchMoreData = () => {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        items: this.state.items.concat(Array.from({ length: 1 })),\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <InfiniteScroll\r\n          className=\"infiniteScroll\"\r\n          dataLength={this.state.items.length}\r\n          next={this.fetchMoreData}\r\n          hasMore={true}\r\n        >\r\n          {this.state.items.map(\r\n            (i, index) => (\r\n              (\r\n                <Container key={index}>\r\n                  {pages[index]}\r\n                </Container>\r\n              )\r\n            )\r\n          )}\r\n        </InfiniteScroll>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n",["108","109"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Home.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\ScrollableElement\\ScrollableElement.js",["110","111","112","113"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\IntersectionObserver\\index.js",[],["114","115"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\DynamicModule\\index.js",["116","117","118","119","120"],"import React, { Component, lazy, Suspense, createRef } from 'react';\r\nimport {\r\n  Container,\r\n  Ref,\r\n  Grid,\r\n  Sticky,\r\n  Table,\r\n  Segment,\r\n  Transition,\r\n  Visibility,\r\n} from 'semantic-ui-react';\r\n\r\nimport Placeholder from '../../Styles/Placeholder';\r\nimport './dynamicModule.css';\r\n\r\nexport default class DynamicModule extends Component {\r\n  state = {\r\n    Component: null,\r\n    loaded: false,\r\n    initializing: false,\r\n    calculations: {\r\n      direction: 'none',\r\n      height: 0,\r\n      width: 0,\r\n      topPassed: false,\r\n      bottomPassed: false,\r\n      pixelsPassed: 0,\r\n      percentagePassed: 0,\r\n      topVisible: false,\r\n      bottomVisible: false,\r\n      fits: false,\r\n      passing: false,\r\n      onScreen: false,\r\n      offScreen: false,\r\n    },\r\n    once: true,\r\n    firstComponent: true,\r\n  };\r\n\r\n  contextRef = createRef();\r\n\r\n  handleUpdate = (e, { calculations }) => this.setState({ calculations });\r\n\r\n  handleBottomVisible = () => {\r\n    // console.log(this.state.firstComponent);\r\n    if (this.state.firstComponent) {\r\n      this.setState({\r\n        loaded: true,\r\n        firstComponent: false,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.props.transition();\r\n      }, 1500);\r\n    } else if (this.state.calculations.fits) {\r\n      this.setState({\r\n        loaded: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTransition = () => {\r\n    this.props.transition();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      Component: lazy(this.props.component),\r\n      initializing: true,\r\n    });\r\n\r\n    // setTimeout(() => {\r\n    //   this.onInitialized();\r\n    // }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { placeholder } = this.props;\r\n    const { loaded, Component, calculations } = this.state;\r\n\r\n    return (\r\n      <Ref innerRef={this.contextRef}>\r\n        {/* <Grid columns={2} style={{ margin: '0px' }}>\r\n          <Grid.Column> */}\r\n        <Visibility\r\n          continuous={false}\r\n          once\r\n          onUpdate={this.handleUpdate}\r\n          style={{ padding: '0 0 0 0' }}\r\n          onBottomVisible={() => this.handleTransition()}\r\n        >\r\n          <Suspense fallback={placeholder}>\r\n            {loaded ? (\r\n              <Transition\r\n                visible={true}\r\n                animation=\"fade\"\r\n                duration={1500}\r\n                mountOnShow={false}\r\n                unmountOnHide={true}\r\n                transitionOnMount={true}\r\n              >\r\n                <Container className=\"dynamicModule\">\r\n                  <Component\r\n                    style={{\r\n                      position: 'absolute',\r\n                      height: '100%',\r\n                    }}\r\n                    project={Boolean}\r\n                  />\r\n                </Container>\r\n              </Transition>\r\n            ) : (\r\n              <Visibility\r\n                once\r\n                fireOnMount={true}\r\n                onBottomVisible={() => this.handleBottomVisible()}\r\n                offset={[75, 75]}\r\n              >\r\n                <Transition\r\n                  visible={true}\r\n                  animation=\"fade\"\r\n                  duration={1500}\r\n                  mountOnShow={false}\r\n                  unmountOnHide={true}\r\n                  transitionOnMount={true}\r\n                >\r\n                  <Placeholder />\r\n                </Transition>\r\n              </Visibility>\r\n            )}\r\n          </Suspense>\r\n        </Visibility>\r\n        {/* </Grid.Column> */}\r\n\r\n        {/* <Grid.Column width={'4'}>\r\n            <Sticky context={this.contextRef}>\r\n              <Table celled>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell>Calculation</Table.HeaderCell>\r\n                    <Table.HeaderCell>Value</Table.HeaderCell>\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  <Table.Row>\r\n                    <Table.Cell>direction</Table.Cell>\r\n                    <Table.Cell>{calculations.direction}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>pixelsPassed</Table.Cell>\r\n                    <Table.Cell>\r\n                      {calculations.pixelsPassed.toFixed()}px\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>percentagePassed</Table.Cell>\r\n                    <Table.Cell>\r\n                      {(calculations.percentagePassed * 100).toFixed()}%\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>fits</Table.Cell>\r\n                    <Table.Cell>{calculations.fits.toString()}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>width</Table.Cell>\r\n                    <Table.Cell>{calculations.width.toFixed()}px</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>height</Table.Cell>\r\n                    <Table.Cell>{calculations.height.toFixed()}px</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>onScreen</Table.Cell>\r\n                    <Table.Cell>{calculations.onScreen.toString()}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>offScreen</Table.Cell>\r\n                    <Table.Cell>{calculations.offScreen.toString()}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>passing</Table.Cell>\r\n                    <Table.Cell>{calculations.passing.toString()}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>topVisible</Table.Cell>\r\n                    <Table.Cell>\r\n                      {calculations.topVisible.toString()}\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>bottomVisible</Table.Cell>\r\n                    <Table.Cell>\r\n                      {calculations.bottomVisible.toString()}\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>topPassed</Table.Cell>\r\n                    <Table.Cell>{calculations.topPassed.toString()}</Table.Cell>\r\n                  </Table.Row>\r\n                  <Table.Row>\r\n                    <Table.Cell>bottomPassed</Table.Cell>\r\n                    <Table.Cell>\r\n                      {calculations.bottomPassed.toString()}\r\n                    </Table.Cell>\r\n                  </Table.Row>\r\n                </Table.Body>\r\n              </Table>\r\n            </Sticky>\r\n          </Grid.Column>\r\n        </Grid> */}\r\n      </Ref>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\DynamicModule\\delay.js",[],["121","122"],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\index.js",["123"],"import React, { useEffect, useState } from 'react';\r\nimport _ from 'lodash';\r\nimport {\r\n  Image,\r\n  Dimmer,\r\n  Button,\r\n  Header,\r\n  Segment,\r\n  Grid,\r\n  Ref,\r\n  Sticky,\r\n  Container,\r\n} from 'semantic-ui-react';\r\n\r\nimport DynamicModule from '../DynamicModule/index';\r\nimport Project1 from './project1';\r\nimport Project2 from './project2';\r\n\r\nimport './projects.css';\r\n\r\nimport BurgerGif from '../../Styles/BurgerProjectGif.gif';\r\n\r\nfunction Projects(props) {\r\n  const [active, setActive] = useState(false);\r\n  const [postIndex, setPostIndex] = useState(0);\r\n  const [postList, setPostList] = useState([]);\r\n\r\n  \r\n  const handleProjectTransition = () => {\r\n    // console.log(this.state.postList);\r\n\r\n    var posti = postIndex;\r\n    var postLi = postList;\r\n\r\n    console.log(postLi);\r\n\r\n    //finds the index of the most recent postList.route\r\n    var index = _.findIndex(projects, function (o) {\r\n      return o === projects[posti];\r\n    });\r\n\r\n    var newIndex = index;\r\n\r\n    if (postLi.length <= projects.length && projects[newIndex]) {\r\n      const newList = postLi.concat([projects[newIndex]]);\r\n      setPostIndex(index + 1);\r\n      setPostList(newList);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleProjectTransition();\r\n  }, []);\r\n\r\n  const projects = [\r\n    {\r\n      path: './project1',\r\n      key: '01',\r\n      name: 'Project1',\r\n      Component: <Project1 />,\r\n      Import: () => import('./project1'),\r\n    },\r\n    {\r\n      path:'./project2',\r\n      key: '02',\r\n      name: 'Project2',\r\n      Component: <Project2 />,\r\n      Import: () => import('./project2'),\r\n    }\r\n  ];\r\n\r\n\r\n  const handleHide = () => {\r\n    setActive(false);\r\n  };\r\n\r\n  const handleShow = () => {\r\n    console.log(props);\r\n    setActive(true);\r\n  };\r\n\r\n  const content = (\r\n    <div>\r\n      <Header as=\"h2\" inverted>\r\n        Burger Builder\r\n      </Header>\r\n\r\n      <Button>View</Button>\r\n    </div>\r\n  );\r\n\r\n  const contextRef = React.useRef(null);\r\n\r\n  return (\r\n    <Container className=\"project1Container\" style={{ margin: '0' }}>\r\n      <p className=\"projectsSpecialColor\">03. Projects</p>\r\n      <br />\r\n      <p className=\"projectsgreytext\">Burger Builder App</p>\r\n      <Segment raised>\r\n        <Grid columns={2} style={{ height: '20vh', margin: '0 0 0 0' }}>\r\n          <Grid.Column\r\n            style={{ padding: '.3vh 0 0 0', margin: '0 2em 0 0' }}\r\n            width={5}\r\n          >\r\n            <Dimmer.Dimmable\r\n              as={Image}\r\n              dimmed={active}\r\n              dimmer={{ active, content }}\r\n              onMouseEnter={() => handleShow()}\r\n              onMouseLeave={() => handleHide()}\r\n              src={BurgerGif}\r\n              className=\"project1Dimmable\"\r\n              size=\"large\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            fluid\r\n            stretched\r\n            style={{ padding: '1vh 0 0 0', width: '30vw' }}\r\n          >\r\n            <Ref innerRef={contextRef}>\r\n              <Sticky context={contextRef}>\r\n                <p>\r\n                  A single page web application that allows the user to build a\r\n                  custom burger, add it to a shopping cart, and pay for it.\r\n                </p>\r\n                <ul className=\"burgerLanguages\">\r\n                  <li className=\"subBurger\">\r\n                    <li>JavaScript</li>\r\n                    <li>HTML5</li>\r\n                    <li>CSS3</li>\r\n                    <li style={{ listStyle: 'none' }}>\r\n                      <br />\r\n                    </li>\r\n                  </li>\r\n\r\n                  <li className=\"subBurger\">\r\n                    <li>Redux</li>\r\n                    <li>Hooks</li>\r\n                    <li>Firebase</li>\r\n                    <li style={{ listStyle: 'none' }}>\r\n                      <br />\r\n                    </li>\r\n                  </li>\r\n\r\n                  <li className=\"subBurger\">\r\n                    <li>Modern React</li>\r\n                    <li style={{ listStyle: 'none' }}>\r\n                      <br />\r\n                    </li>\r\n                    <li style={{ listStyle: 'none' }}>\r\n                      <br />\r\n                    </li>\r\n                    <li style={{ listStyle: 'none' }}>\r\n                      <br />\r\n                    </li>\r\n                  </li>\r\n                </ul>\r\n              </Sticky>\r\n            </Ref>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      {postList.map((project, index) => {\r\n        return (\r\n          <DynamicModule\r\n            key={index}\r\n            placeholder={project.Component}\r\n            component={project.Import}\r\n            transition={() => handleProjectTransition()}\r\n          />\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Projects;\r\n","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Placeholder.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Card\\Card.js",["124"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Image,\r\n  Button,\r\n  Icon,\r\n  Sticky,\r\n  Grid,\r\n  Transition,\r\n} from 'semantic-ui-react';\r\n\r\nimport VoteCount from './VoteCount';\r\nimport './Card.css';\r\nimport Portrait from '../BitMojiProfile.png';\r\n\r\nexport default function CardComponent(props) {\r\n  const [vote, setVote] = useState(0);\r\n  const [visible, setVisible] = useState(true);\r\n  const [textColor, setTextColor] = useState(null);\r\n  const [animation, setAnimation] = useState(null);\r\n  const [cardVisible, setCardVisible] = useState(true);\r\n  const [buttonVisible, setButtonVisible] = useState(true);\r\n\r\n  const [greenIconName, setGreenIconName] = useState('thumbs up outline');\r\n  const [greenButton, setGreenButton] = useState(true);\r\n  const [greenButtonColor, setGreenButtonColor] = useState('none');\r\n\r\n  const [redIconName, setRedIconName] = useState('thumbs down outline');\r\n\r\n  useEffect(() => {\r\n    setVisible(true);\r\n    if (\r\n      (redIconName !== 'x' && vote > 4) ||\r\n      (redIconName !== 'x' && vote < -4)\r\n    ) {\r\n      setGreenIconName('arrow alternate circle up');\r\n      setRedIconName('x');\r\n      setGreenButtonColor('green');\r\n      setAnimation('horizontal flip');\r\n      setCardVisible(false);\r\n      setButtonVisible(false);\r\n      setTimeout(() => {\r\n        setButtonVisible(true);\r\n      }, 500);\r\n    }\r\n  }, [visible, vote]);\r\n\r\n  const thumbsUpMouseDown = () => {\r\n    if (vote <= 4 && vote >= -4) {\r\n      setVisible(false);\r\n      setTextColor('#1d0503');\r\n      setVote(vote + 1);\r\n    } else {\r\n      setGreenButton(!greenButton);\r\n      setVisible(false);\r\n    }\r\n  };\r\n\r\n  const thumbsDownMouseDown = () => {\r\n    setVisible(false);\r\n\r\n    if (vote > 4) {\r\n      setVote(3);\r\n      setVisible(false);\r\n      setRedIconName('thumbs down outline');\r\n      setGreenIconName('thumbs up outline');\r\n      setGreenButtonColor('#222629');\r\n      setCardVisible(true);\r\n    } else if (vote < -4) {\r\n      setVote(-3);\r\n      setVisible(false);\r\n      setRedIconName('thumbs down outline');\r\n      setGreenIconName('thumbs up outline');\r\n      setGreenButtonColor('#222629');\r\n      setCardVisible(true);\r\n    } else if (vote <= 4 || vote >= 4) {\r\n      setVote(vote - 1);\r\n      setTextColor('#9494FF');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Sticky>\r\n      <Card raised floated=\"right\" style={{ margin: '0 0 0 0' }}>\r\n        <Card.Content>\r\n          <Image\r\n            avatar\r\n            size=\"massive\"\r\n            style={{ margin: '-.25em 0 1em 0' }}\r\n            src={Portrait}\r\n            floated=\"right\"\r\n          />\r\n\r\n          <Card.Header style={{ color: '#2e0a05' }}>\r\n            Richard O'Donnell\r\n          </Card.Header>\r\n          <Card.Meta>Software Engineer</Card.Meta>\r\n          <Transition\r\n            animation={animation}\r\n            visible={cardVisible}\r\n            duration={500}\r\n          >\r\n            <Card.Description>\r\n              Richard is a software engineer living in the Bay Area who enjoys\r\n              being with family and playing soccer.\r\n            </Card.Description>\r\n          </Transition>\r\n          <VoteCount\r\n            greenButtonClick={greenButton}\r\n            currentCount={vote}\r\n            tallyColor={textColor}\r\n            vis={visible}\r\n            noClick={() => thumbsDownMouseDown()}\r\n          />\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Grid columns={2}>\r\n            <Grid.Column verticalAlign=\"bottom\">\r\n              <Button className=\"LinkedInButton\" basic>\r\n                Connect on{' '}\r\n                <Icon\r\n                  style={{\r\n                    margin: '.4em 0 0 0',\r\n                    color: '#2867B2',\r\n                    border: 'none',\r\n                  }}\r\n                  name=\"linkedin\"\r\n                />\r\n              </Button>\r\n            </Grid.Column>\r\n            <Transition visible={buttonVisible} duration={500} animation=\"fade\">\r\n              <Grid.Column verticalAlign={'bottom'} className=\"ui two buttons\">\r\n                <Button\r\n                  onMouseDown={() => thumbsUpMouseDown()}\r\n                  className=\"thumbsUpButton\"\r\n                >\r\n                  <Icon\r\n                    color=\"red\"\r\n                    style={{ color: `${greenButtonColor}` }}\r\n                    name={greenIconName}\r\n                  />\r\n                </Button>\r\n                <Button\r\n                  onClick={() => thumbsDownMouseDown()}\r\n                  className=\"thumbsDownButton\"\r\n                >\r\n                  <Icon color=\"red\" name={redIconName} />\r\n                </Button>\r\n              </Grid.Column>\r\n            </Transition>\r\n          </Grid>\r\n        </Card.Content>\r\n      </Card>\r\n    </Sticky>\r\n  );\r\n}\r\n","C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Styles\\Card\\VoteCount.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\BlockJumpingGame\\app.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\Navigation\\VerticalMenu.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\project1.js",[],"C:\\Users\\Richard\\GitProjects\\portfolio\\portfolio\\src\\components\\Projects\\project2.js",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":4,"column":20,"nodeType":"131","messageId":"132","endLine":4,"endColumn":26},{"ruleId":"129","severity":1,"message":"133","line":5,"column":3,"nodeType":"131","messageId":"132","endLine":5,"endColumn":8},{"ruleId":"129","severity":1,"message":"134","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":23},{"ruleId":"125","replacedBy":"135"},{"ruleId":"127","replacedBy":"136"},{"ruleId":"129","severity":1,"message":"137","line":1,"column":27,"nodeType":"131","messageId":"132","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"138","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":18},{"ruleId":"129","severity":1,"message":"139","line":2,"column":20,"nodeType":"131","messageId":"132","endLine":2,"endColumn":29},{"ruleId":"125","replacedBy":"140"},{"ruleId":"127","replacedBy":"141"},{"ruleId":"129","severity":1,"message":"138","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"139","line":1,"column":27,"nodeType":"131","messageId":"132","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"142","line":1,"column":38,"nodeType":"131","messageId":"132","endLine":1,"endColumn":44},{"ruleId":"129","severity":1,"message":"143","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":23},{"ruleId":"125","replacedBy":"144"},{"ruleId":"127","replacedBy":"145"},{"ruleId":"129","severity":1,"message":"146","line":5,"column":3,"nodeType":"131","messageId":"132","endLine":5,"endColumn":7},{"ruleId":"129","severity":1,"message":"147","line":6,"column":3,"nodeType":"131","messageId":"132","endLine":6,"endColumn":9},{"ruleId":"129","severity":1,"message":"148","line":7,"column":3,"nodeType":"131","messageId":"132","endLine":7,"endColumn":8},{"ruleId":"129","severity":1,"message":"149","line":8,"column":3,"nodeType":"131","messageId":"132","endLine":8,"endColumn":10},{"ruleId":"129","severity":1,"message":"150","line":79,"column":32,"nodeType":"131","messageId":"132","endLine":79,"endColumn":44},{"ruleId":"125","replacedBy":"151"},{"ruleId":"127","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":53,"column":6,"nodeType":"155","endLine":53,"endColumn":8,"suggestions":"156"},{"ruleId":"153","severity":1,"message":"157","line":46,"column":6,"nodeType":"155","endLine":46,"endColumn":21,"suggestions":"158"},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'GreyButtonHover' is defined but never used.",["159"],["160"],"'Component' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["159"],["160"],"'useRef' is defined but never used.","'CSSTransition' is defined but never used.",["159"],["160"],"'Grid' is defined but never used.","'Sticky' is defined but never used.","'Table' is defined but never used.","'Segment' is defined but never used.","'calculations' is assigned a value but never used.",["159"],["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleProjectTransition'. Either include it or remove the dependency array.","ArrayExpression",["161"],"React Hook useEffect has a missing dependency: 'redIconName'. Either include it or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [handleProjectTransition]",{"range":"167","text":"168"},"Update the dependencies array to be: [redIconName, visible, vote]",{"range":"169","text":"170"},[1236,1238],"[handleProjectTransition]",[1377,1392],"[redIconName, visible, vote]"]